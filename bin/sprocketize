#!/usr/bin/env ruby

require File.join(File.dirname(__FILE__), *%w".. lib sprockets")
require "optparse"

load_path = (ENV["SPROCKETS_PATH"] || "").split(":")
pack_output = false
filenames = []

OptionParser.new do |opts|
  opts.summary_width = 28
  opts.banner = "Usage: sprocketize [options] filename [filename ...]"
  
  def opts.show_usage
    puts self
    exit
  end
  
  opts.on("-C DIRECTORY", "--directory=DIRECTORY", "Change to DIRECTORY before doing anything") do |directory|
    Dir.chdir(directory)
  end
  
  opts.on("-I DIRECTORY", "--include-dir=DIRECTORY", "Adds the directory to the Sprockets load path") do |directory|
    load_path << directory
  end
  
  opts.on("-p", "--packed", "Pack output file with YUI compressor") do
    pack_output = true
  end
  
  opts.on_tail("-h", "--help", "Shows this help message") do
    opts.show_usage
  end
  
  opts.on_tail("-v", "--version", "Shows version") do
    puts Sprockets::Version::STRING
    exit
  end
  
  opts.show_usage if ARGV.empty?
  
  begin
    opts.order(ARGV) do |filename|
      filenames << filename
    end
  rescue OptionParser::ParseError => e
    opts.warn e.message
    opts.show_usage
  end
end

environment  = Sprockets::Environment.new(".", load_path)
preprocessor = Sprockets::Preprocessor.new(environment)

filenames.each do |filename|
  if pathname = environment.find(filename)
    preprocessor.require(pathname.source_file)
  else
    raise Sprockets::LoadError, "no such file `#{filename}'"
  end
end

output = preprocessor.output_file
print pack_output ? Sprockets::Packer.new(output).output_file : output
